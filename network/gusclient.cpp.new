#include "gusclient.h"
#include <QUrl>
#include <QMessageBox>
#include <QRegularExpression>
#include <QProcess>
#include <QJsonDocument>
#include <QJsonObject>
#include <QDir>
#include <QFile>
#include <QDebug>

// ***** INTEGRACJA Z PYTHON RegonAPI-1.3.1 *****
// PRAWDZIWY KLUCZ API GUS - GOTOWY DO TESTOWANIA!
const QString GusClient::API_KEY = "c9f317f699c84d9e9f0f";

// Konfiguracja środowisk - teraz używamy Python RegonAPI
const bool GusClient::IS_PRODUCTION = true;

GusClient::GusClient(QObject *parent) : QObject(parent) {
    qDebug() << "[GUS] Inicjalizacja GusClient z integracją Python RegonAPI-1.3.1";
    qDebug() << "[GUS] Klucz API:" << API_KEY;
    qDebug() << "[GUS] Środowisko produkcyjne:" << IS_PRODUCTION;
}

GusClient::~GusClient() {
    qDebug() << "[GUS] Destruktor GusClient - Python RegonAPI obsługuje zarządzanie sesją";
}

void GusClient::fetchCompanyData(const QString &nip) {
    qDebug() << "[GUS] fetchCompanyData called with NIP:" << nip;
    qDebug() << "[GUS] Używam Python RegonAPI-1.3.1";
    qDebug() << "[GUS] Klucz API:" << API_KEY;
    qDebug() << "[GUS] Środowisko produkcyjne:" << IS_PRODUCTION;
    
    // Usuń wszystkie znaki specjalne
    QString cleanNip = nip;
    cleanNip.remove(QRegularExpression("[^0-9]")); // zostaw tylko cyfry
    if (cleanNip.isEmpty()) {
        emit errorOccurred("Podano pusty numer NIP");
        return;
    }
    if (cleanNip.length() != 10) {
        emit errorOccurred("Nieprawidłowa długość numeru NIP (wymagane 10 cyfr)");
        return;
    }
    
    qDebug() << "[GUS] Oczyszczony NIP:" << cleanNip;
    
    // Wywołaj Python wrapper
    callPythonWrapper(cleanNip);
}

void GusClient::callPythonWrapper(const QString &nip) {
    qDebug() << "[GUS] *** WYWOŁANIE PYTHON RegonAPI WRAPPER ***";
    
    // Znajdź ścieżkę do Python wrapper
    QString pythonScript = QDir::toNativeSeparators(
        QDir::currentPath() + "/python/gus_wrapper.py"
    );
    
    qDebug() << "[GUS] Ścieżka do Python script:" << pythonScript;
    
    // Sprawdź czy plik istnieje
    if (!QFile::exists(pythonScript)) {
        emit errorOccurred("Nie znaleziono Python wrapper: " + pythonScript);
        return;
    }
    
    // Przygotuj argumenty
    QStringList arguments;
    arguments << pythonScript;
    arguments << "--nip" << nip;
    arguments << "--api-key" << API_KEY;
    if (IS_PRODUCTION) {
        arguments << "--production";
    }
    arguments << "--debug";  // Włącz debug dla diagnostyki
    
    qDebug() << "[GUS] Python argumenty:" << arguments;
    
    // Utwórz proces Python
    QProcess *pythonProcess = new QProcess(this);
    
    // Połącz sygnały
    connect(pythonProcess, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
            this, &GusClient::onPythonProcessFinished);
    connect(pythonProcess, &QProcess::errorOccurred,
            this, &GusClient::onPythonProcessError);
    
    // Uruchom Python
    QString pythonExecutable = "python";  // lub "python3" w zależności od systemu
    
    qDebug() << "[GUS] Uruchamiam:" << pythonExecutable << arguments;
    pythonProcess->start(pythonExecutable, arguments);
    
    if (!pythonProcess->waitForStarted(5000)) {
        emit errorOccurred("Nie udało się uruchomić Python: " + pythonProcess->errorString());
        pythonProcess->deleteLater();
        return;
    }
    
    qDebug() << "[GUS] Python proces uruchomiony, oczekuję na wynik...";
}

void GusClient::onPythonProcessFinished(int exitCode, QProcess::ExitStatus exitStatus) {
    QProcess *process = qobject_cast<QProcess*>(sender());
    if (!process) {
        emit errorOccurred("Błąd wewnętrzny: brak odniesienia do procesu Python");
        return;
    }
    
    qDebug() << "[GUS] Python proces zakończony, kod:" << exitCode << "status:" << exitStatus;
    
    if (exitStatus != QProcess::NormalExit || exitCode != 0) {
        QString errorOutput = process->readAllStandardError();
        qDebug() << "[GUS] Python błąd stderr:" << errorOutput;
        emit errorOccurred("Python proces zakończony błędem: " + errorOutput);
        process->deleteLater();
        return;
    }
    
    // Odczytaj wynik JSON
    QByteArray jsonOutput = process->readAllStandardOutput();
    QString jsonString = QString::fromUtf8(jsonOutput);
    
    qDebug() << "[GUS] Python wynik JSON:" << jsonString;
    
    // Parsuj JSON
    QJsonParseError parseError;
    QJsonDocument jsonDoc = QJsonDocument::fromJson(jsonOutput, &parseError);
    
    if (parseError.error != QJsonParseError::NoError) {
        emit errorOccurred("Błąd parsowania JSON: " + parseError.errorString());
        process->deleteLater();
        return;
    }
    
    QJsonObject result = jsonDoc.object();
    
    // Sprawdź czy operacja się powiodła
    if (!result["success"].toBool()) {
        QString error = result["error"].toString();
        if (error.isEmpty()) {
            error = "Nieznany błąd Python RegonAPI";
        }
        emit errorOccurred("RegonAPI błąd: " + error);
        process->deleteLater();
        return;
    }
    
    // Wyciągnij dane firmy
    QJsonObject dataObj = result["data"].toObject();
    QMap<QString, QString> companyData;
    
    for (auto it = dataObj.begin(); it != dataObj.end(); ++it) {
        companyData[it.key()] = it.value().toString();
    }
    
    qDebug() << "[GUS] *** SUKCES! OTRZYMANO DANE Z PYTHON RegonAPI ***";
    qDebug() << "[GUS] Liczba pól:" << companyData.size();
    
    // Loguj wszystkie otrzymane dane
    for (auto it = companyData.begin(); it != companyData.end(); ++it) {
        qDebug() << "[GUS] " << it.key() << "=" << it.value();
    }
    
    emit companyDataReceived(companyData);
    process->deleteLater();
}

void GusClient::onPythonProcessError(QProcess::ProcessError error) {
    QProcess *process = qobject_cast<QProcess*>(sender());
    QString errorString;
    
    switch (error) {
        case QProcess::FailedToStart:
            errorString = "Nie udało się uruchomić Python - sprawdź czy Python jest zainstalowany";
            break;
        case QProcess::Crashed:
            errorString = "Python proces uległ awarii";
            break;
        case QProcess::Timedout:
            errorString = "Python proces przekroczył limit czasu";
            break;
        case QProcess::ReadError:
            errorString = "Błąd odczytu z Python procesu";
            break;
        case QProcess::WriteError:
            errorString = "Błąd zapisu do Python procesu";
            break;
        default:
            errorString = "Nieznany błąd Python procesu";
            break;
    }
    
    qDebug() << "[GUS] Python proces błąd:" << errorString;
    emit errorOccurred(errorString);
    
    if (process) {
        process->deleteLater();
    }
}
