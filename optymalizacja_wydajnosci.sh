#!/bin/bash

# Skrypt Optymalizacji Wydajno≈õci Aplikacji EtykietyManager
# Autor: AI Assistant
# Data: 2024
# Wersja: 1.0

echo "üöÄ Skrypt Optymalizacji Wydajno≈õci EtykietyManager"
echo "================================================="

# Sprawd≈∫ czy jeste≈õmy w g≈Ç√≥wnym katalogu projektu
if [ ! -f "CMakeLists.txt" ]; then
    echo "‚ùå B≈ÇƒÖd: Nie znaleziono CMakeLists.txt"
    echo "   Uruchom skrypt z g≈Ç√≥wnego katalogu projektu"
    exit 1
fi

# Funkcja do tworzenia kopii zapasowej
backup_file() {
    local file=$1
    if [ -f "$file" ]; then
        cp "$file" "${file}.backup.$(date +%Y%m%d_%H%M%S)"
        echo "‚úÖ Utworzono kopiƒô zapasowƒÖ: ${file}.backup.$(date +%Y%m%d_%H%M%S)"
    fi
}

# Funkcja do czyszczenia niepotrzebnych czcionek
clean_fonts() {
    echo "üßπ Czyszczenie niepotrzebnych czcionek..."
    
    # Usu≈Ñ duplikaty czcionek z katalogu utils
    if [ -d "utils" ]; then
        echo "   Usuwanie duplikat√≥w czcionek z utils/"
        find utils/ -name "*.ttf" -not -name "DejaVuSans.ttf" -not -name "DejaVuSans-Bold.ttf" -delete
    fi
    
    # Usu≈Ñ niepotrzebne czcionki z resources
    if [ -d "resources" ]; then
        echo "   Usuwanie niepotrzebnych czcionek z resources/"
        find resources/ -name "*.ttf" -not -name "DejaVuSans.ttf" -not -name "DejaVuSans-Bold.ttf" -delete
    fi
    
    # Usu≈Ñ czcionki z build directory
    if [ -d "build" ]; then
        echo "   Usuwanie czcionek z build/"
        find build/ -name "*.ttf" -delete
    fi
    
    echo "‚úÖ Czyszczenie czcionek zako≈Ñczone"
}

# Funkcja do optymalizacji zasob√≥w
optimize_resources() {
    echo "üì¶ Optymalizacja zasob√≥w Qt..."
    
    if [ -f "resources/app.qrc" ]; then
        backup_file "resources/app.qrc"
        
        if [ -f "resources/app_optimized.qrc" ]; then
            cp "resources/app_optimized.qrc" "resources/app.qrc"
            echo "‚úÖ ZastƒÖpiono app.qrc zoptymalizowanƒÖ wersjƒÖ"
        else
            echo "‚ö†Ô∏è  Ostrze≈ºenie: Brak pliku app_optimized.qrc"
        fi
    fi
}

# Funkcja do optymalizacji CMakeLists.txt
optimize_cmake() {
    echo "‚öôÔ∏è  Optymalizacja CMakeLists.txt..."
    
    if [ -f "CMakeLists.txt" ]; then
        backup_file "CMakeLists.txt"
        
        if [ -f "CMakeLists_optimized.txt" ]; then
            cp "CMakeLists_optimized.txt" "CMakeLists.txt"
            echo "‚úÖ ZastƒÖpiono CMakeLists.txt zoptymalizowanƒÖ wersjƒÖ"
        else
            echo "‚ö†Ô∏è  Ostrze≈ºenie: Brak pliku CMakeLists_optimized.txt"
        fi
    fi
}

# Funkcja do analizy rozmiaru
analyze_size() {
    echo "üìä Analiza rozmiaru plik√≥w..."
    
    if [ -d "resources" ]; then
        echo "   Rozmiar katalogu resources:"
        du -sh resources/
    fi
    
    if [ -d "utils" ]; then
        echo "   Rozmiar katalogu utils:"
        du -sh utils/
    fi
    
    if [ -d "build" ]; then
        echo "   Rozmiar katalogu build:"
        du -sh build/
    fi
    
    echo "   Najwƒô≈ºsze pliki:"
    find . -name "*.ttf" -o -name "*.pdf" -o -name "*.exe" -o -name "*.dll" | xargs ls -lh | sort -k5 -hr | head -10
}

# Funkcja do czyszczenia plik√≥w tymczasowych
clean_temp() {
    echo "üßΩ Czyszczenie plik√≥w tymczasowych..."
    
    # Usu≈Ñ pliki cache
    find . -name "*.cache" -delete
    find . -name "*.tmp" -delete
    find . -name "*.temp" -delete
    
    # Usu≈Ñ pliki Qt MOC
    find . -name "moc_*.cpp" -delete
    find . -name "ui_*.h" -delete
    find . -name "qrc_*.cpp" -delete
    
    # Usu≈Ñ pliki CMake cache
    find . -name "CMakeCache.txt" -delete
    find . -name "cmake_install.cmake" -delete
    find . -type d -name "CMakeFiles" -exec rm -rf {} + 2>/dev/null || true
    
    echo "‚úÖ Czyszczenie plik√≥w tymczasowych zako≈Ñczone"
}

# Funkcja do weryfikacji optymalizacji
verify_optimization() {
    echo "üîç Weryfikacja optymalizacji..."
    
    # Sprawd≈∫ czy istniejƒÖ zoptymalizowane pliki
    local errors=0
    
    if [ ! -f "resources/app.qrc" ]; then
        echo "‚ùå Brak pliku resources/app.qrc"
        errors=$((errors + 1))
    fi
    
    if [ ! -f "CMakeLists.txt" ]; then
        echo "‚ùå Brak pliku CMakeLists.txt"
        errors=$((errors + 1))
    fi
    
    if [ ! -f "pch.cpp" ]; then
        echo "‚ö†Ô∏è  Brak pliku pch.cpp - dodaj precompiled headers"
    fi
    
    if [ $errors -eq 0 ]; then
        echo "‚úÖ Weryfikacja przebieg≈Ça pomy≈õlnie"
    else
        echo "‚ùå Znaleziono $errors b≈Çƒôd√≥w"
        return 1
    fi
}

# Funkcja do generowania raportu
generate_report() {
    echo "üìã Generowanie raportu optymalizacji..."
    
    local report_file="raport_optymalizacji_$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "Raport Optymalizacji Wydajno≈õci"
        echo "==============================="
        echo "Data: $(date)"
        echo "Katalog: $(pwd)"
        echo ""
        echo "Analiza rozmiaru po optymalizacji:"
        du -sh resources/ utils/ build/ 2>/dev/null || echo "Niekt√≥re katalogi nie istniejƒÖ"
        echo ""
        echo "Liczba plik√≥w .ttf:"
        find . -name "*.ttf" | wc -l
        echo ""
        echo "Najwiƒôksze pliki:"
        find . -type f -exec ls -lh {} + | sort -k5 -hr | head -20
    } > "$report_file"
    
    echo "‚úÖ Raport zapisany w: $report_file"
}

# Menu g≈Ç√≥wne
show_menu() {
    echo ""
    echo "Wybierz opcjƒô:"
    echo "1. Kompletna optymalizacja (zalecane)"
    echo "2. Tylko czyszczenie czcionek"
    echo "3. Tylko optymalizacja zasob√≥w"
    echo "4. Tylko optymalizacja CMake"
    echo "5. Analiza rozmiaru"
    echo "6. Czyszczenie plik√≥w tymczasowych"
    echo "7. Weryfikacja optymalizacji"
    echo "8. Generuj raport"
    echo "9. Wyj≈õcie"
    echo ""
    read -p "Wprowad≈∫ numer opcji (1-9): " choice
}

# Funkcja kompletnej optymalizacji
full_optimization() {
    echo "üéØ Rozpoczynam kompletnƒÖ optymalizacjƒô..."
    
    clean_fonts
    optimize_resources
    optimize_cmake
    clean_temp
    verify_optimization
    generate_report
    
    echo ""
    echo "üéâ Kompletna optymalizacja zako≈Ñczona!"
    echo "üìä Sprawd≈∫ plik ANALIZA_WYDAJNOSCI.md dla szczeg√≥≈Ç√≥w"
    echo "‚ö†Ô∏è  Pamiƒôtaj o przetestowaniu aplikacji po optymalizacji"
}

# G≈Ç√≥wna pƒôtla programu
main() {
    while true; do
        show_menu
        
        case $choice in
            1)
                full_optimization
                ;;
            2)
                clean_fonts
                ;;
            3)
                optimize_resources
                ;;
            4)
                optimize_cmake
                ;;
            5)
                analyze_size
                ;;
            6)
                clean_temp
                ;;
            7)
                verify_optimization
                ;;
            8)
                generate_report
                ;;
            9)
                echo "üëã Dziƒôkujƒô za skorzystanie ze skryptu optymalizacji!"
                exit 0
                ;;
            *)
                echo "‚ùå Nieprawid≈Çowa opcja. Wybierz numer od 1 do 9."
                ;;
        esac
        
        echo ""
        read -p "Naci≈õnij Enter aby kontynuowaƒá..."
    done
}

# Uruchom g≈Ç√≥wnƒÖ funkcjƒô
main